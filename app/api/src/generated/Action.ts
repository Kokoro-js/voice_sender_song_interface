// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "Action.proto" (package "OMNI.Action", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PlayState } from "./Base";
/**
 * @generated from protobuf message OMNI.Action.SeekPayload
 */
export interface SeekPayload {
    /**
     * @generated from protobuf field: int32 second = 1;
     */
    second: number;
}
/**
 * @generated from protobuf message OMNI.Action.DoSkipPayload
 */
export interface DoSkipPayload {
    /**
     * @generated from protobuf field: optional string next = 1;
     */
    next?: string;
}
/**
 * @generated from protobuf message OMNI.Action.SwitchPlayState
 */
export interface SwitchPlayState {
    /**
     * @generated from protobuf field: OMNI.PlayState state = 1;
     */
    state: PlayState;
}
// @generated message type with reflection information, may provide speed optimized methods
class SeekPayload$Type extends MessageType<SeekPayload> {
    constructor() {
        super("OMNI.Action.SeekPayload", [
            { no: 1, name: "second", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SeekPayload>): SeekPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.second = 0;
        if (value !== undefined)
            reflectionMergePartial<SeekPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeekPayload): SeekPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 second */ 1:
                    message.second = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeekPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 second = 1; */
        if (message.second !== 0)
            writer.tag(1, WireType.Varint).int32(message.second);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OMNI.Action.SeekPayload
 */
export const SeekPayload = new SeekPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoSkipPayload$Type extends MessageType<DoSkipPayload> {
    constructor() {
        super("OMNI.Action.DoSkipPayload", [
            { no: 1, name: "next", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DoSkipPayload>): DoSkipPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DoSkipPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DoSkipPayload): DoSkipPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string next */ 1:
                    message.next = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DoSkipPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string next = 1; */
        if (message.next !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.next);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OMNI.Action.DoSkipPayload
 */
export const DoSkipPayload = new DoSkipPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SwitchPlayState$Type extends MessageType<SwitchPlayState> {
    constructor() {
        super("OMNI.Action.SwitchPlayState", [
            { no: 1, name: "state", kind: "enum", T: () => ["OMNI.PlayState", PlayState] }
        ]);
    }
    create(value?: PartialMessage<SwitchPlayState>): SwitchPlayState {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.state = 0;
        if (value !== undefined)
            reflectionMergePartial<SwitchPlayState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SwitchPlayState): SwitchPlayState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* OMNI.PlayState state */ 1:
                    message.state = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SwitchPlayState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* OMNI.PlayState state = 1; */
        if (message.state !== 0)
            writer.tag(1, WireType.Varint).int32(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OMNI.Action.SwitchPlayState
 */
export const SwitchPlayState = new SwitchPlayState$Type();
