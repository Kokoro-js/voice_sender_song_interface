// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "Stream.proto" (package "OMNI.Instance", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SwitchPlayState } from "./Action";
import { DoSkipPayload } from "./Action";
import { SeekPayload } from "./Action";
import { OrderItem } from "./Base";
import { StreamInfo } from "./Base";
import { BaseInfo } from "./Base";
/**
 * @generated from protobuf message OMNI.Instance.StartStreamPayload
 */
export interface StartStreamPayload {
    /**
     * @generated from protobuf field: OMNI.BaseInfo info = 1;
     */
    info?: BaseInfo;
    /**
     * @generated from protobuf field: OMNI.StreamInfo stream_info = 2;
     */
    streamInfo?: StreamInfo;
    /**
     * @generated from protobuf field: repeated OMNI.OrderItem order_list = 4;
     */
    orderList: OrderItem[];
}
/**
 * @generated from protobuf message OMNI.Instance.RemoveStreamPayload
 */
export interface RemoveStreamPayload {
    /**
     * @generated from protobuf field: OMNI.BaseInfo info = 1;
     */
    info?: BaseInfo;
}
/**
 * @generated from protobuf message OMNI.Instance.UpdateStreamPayload
 */
export interface UpdateStreamPayload {
    /**
     * @generated from protobuf field: OMNI.BaseInfo info = 1;
     */
    info?: BaseInfo;
    /**
     * @generated from protobuf field: OMNI.StreamInfo stream_info = 2;
     */
    streamInfo?: StreamInfo;
    /**
     * @generated from protobuf oneof: action
     */
    action: {
        oneofKind: "seekPayload";
        /**
         * @generated from protobuf field: OMNI.Action.SeekPayload seek_payload = 3;
         */
        seekPayload: SeekPayload;
    } | {
        oneofKind: "skipPayload";
        /**
         * @generated from protobuf field: OMNI.Action.DoSkipPayload skip_payload = 4;
         */
        skipPayload: DoSkipPayload;
    } | {
        oneofKind: "switchPlayStatePayload";
        /**
         * @generated from protobuf field: OMNI.Action.SwitchPlayState switch_play_state_payload = 5;
         */
        switchPlayStatePayload: SwitchPlayState;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message OMNI.Instance.GetStreamPayload
 */
export interface GetStreamPayload {
    /**
     * @generated from protobuf field: OMNI.BaseInfo info = 1;
     */
    info?: BaseInfo;
}
// @generated message type with reflection information, may provide speed optimized methods
class StartStreamPayload$Type extends MessageType<StartStreamPayload> {
    constructor() {
        super("OMNI.Instance.StartStreamPayload", [
            { no: 1, name: "info", kind: "message", T: () => BaseInfo },
            { no: 2, name: "stream_info", kind: "message", T: () => StreamInfo },
            { no: 4, name: "order_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => OrderItem }
        ]);
    }
    create(value?: PartialMessage<StartStreamPayload>): StartStreamPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.orderList = [];
        if (value !== undefined)
            reflectionMergePartial<StartStreamPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartStreamPayload): StartStreamPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* OMNI.BaseInfo info */ 1:
                    message.info = BaseInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                case /* OMNI.StreamInfo stream_info */ 2:
                    message.streamInfo = StreamInfo.internalBinaryRead(reader, reader.uint32(), options, message.streamInfo);
                    break;
                case /* repeated OMNI.OrderItem order_list */ 4:
                    message.orderList.push(OrderItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartStreamPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* OMNI.BaseInfo info = 1; */
        if (message.info)
            BaseInfo.internalBinaryWrite(message.info, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* OMNI.StreamInfo stream_info = 2; */
        if (message.streamInfo)
            StreamInfo.internalBinaryWrite(message.streamInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated OMNI.OrderItem order_list = 4; */
        for (let i = 0; i < message.orderList.length; i++)
            OrderItem.internalBinaryWrite(message.orderList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OMNI.Instance.StartStreamPayload
 */
export const StartStreamPayload = new StartStreamPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveStreamPayload$Type extends MessageType<RemoveStreamPayload> {
    constructor() {
        super("OMNI.Instance.RemoveStreamPayload", [
            { no: 1, name: "info", kind: "message", T: () => BaseInfo }
        ]);
    }
    create(value?: PartialMessage<RemoveStreamPayload>): RemoveStreamPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RemoveStreamPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveStreamPayload): RemoveStreamPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* OMNI.BaseInfo info */ 1:
                    message.info = BaseInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveStreamPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* OMNI.BaseInfo info = 1; */
        if (message.info)
            BaseInfo.internalBinaryWrite(message.info, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OMNI.Instance.RemoveStreamPayload
 */
export const RemoveStreamPayload = new RemoveStreamPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateStreamPayload$Type extends MessageType<UpdateStreamPayload> {
    constructor() {
        super("OMNI.Instance.UpdateStreamPayload", [
            { no: 1, name: "info", kind: "message", T: () => BaseInfo },
            { no: 2, name: "stream_info", kind: "message", T: () => StreamInfo },
            { no: 3, name: "seek_payload", kind: "message", oneof: "action", T: () => SeekPayload },
            { no: 4, name: "skip_payload", kind: "message", oneof: "action", T: () => DoSkipPayload },
            { no: 5, name: "switch_play_state_payload", kind: "message", oneof: "action", T: () => SwitchPlayState }
        ]);
    }
    create(value?: PartialMessage<UpdateStreamPayload>): UpdateStreamPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.action = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UpdateStreamPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateStreamPayload): UpdateStreamPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* OMNI.BaseInfo info */ 1:
                    message.info = BaseInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                case /* OMNI.StreamInfo stream_info */ 2:
                    message.streamInfo = StreamInfo.internalBinaryRead(reader, reader.uint32(), options, message.streamInfo);
                    break;
                case /* OMNI.Action.SeekPayload seek_payload */ 3:
                    message.action = {
                        oneofKind: "seekPayload",
                        seekPayload: SeekPayload.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).seekPayload)
                    };
                    break;
                case /* OMNI.Action.DoSkipPayload skip_payload */ 4:
                    message.action = {
                        oneofKind: "skipPayload",
                        skipPayload: DoSkipPayload.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).skipPayload)
                    };
                    break;
                case /* OMNI.Action.SwitchPlayState switch_play_state_payload */ 5:
                    message.action = {
                        oneofKind: "switchPlayStatePayload",
                        switchPlayStatePayload: SwitchPlayState.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).switchPlayStatePayload)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateStreamPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* OMNI.BaseInfo info = 1; */
        if (message.info)
            BaseInfo.internalBinaryWrite(message.info, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* OMNI.StreamInfo stream_info = 2; */
        if (message.streamInfo)
            StreamInfo.internalBinaryWrite(message.streamInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* OMNI.Action.SeekPayload seek_payload = 3; */
        if (message.action.oneofKind === "seekPayload")
            SeekPayload.internalBinaryWrite(message.action.seekPayload, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* OMNI.Action.DoSkipPayload skip_payload = 4; */
        if (message.action.oneofKind === "skipPayload")
            DoSkipPayload.internalBinaryWrite(message.action.skipPayload, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* OMNI.Action.SwitchPlayState switch_play_state_payload = 5; */
        if (message.action.oneofKind === "switchPlayStatePayload")
            SwitchPlayState.internalBinaryWrite(message.action.switchPlayStatePayload, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OMNI.Instance.UpdateStreamPayload
 */
export const UpdateStreamPayload = new UpdateStreamPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetStreamPayload$Type extends MessageType<GetStreamPayload> {
    constructor() {
        super("OMNI.Instance.GetStreamPayload", [
            { no: 1, name: "info", kind: "message", T: () => BaseInfo }
        ]);
    }
    create(value?: PartialMessage<GetStreamPayload>): GetStreamPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetStreamPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetStreamPayload): GetStreamPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* OMNI.BaseInfo info */ 1:
                    message.info = BaseInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetStreamPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* OMNI.BaseInfo info = 1; */
        if (message.info)
            BaseInfo.internalBinaryWrite(message.info, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OMNI.Instance.GetStreamPayload
 */
export const GetStreamPayload = new GetStreamPayload$Type();
