// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "Response.proto" (package "OMNI", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PlayState } from "./Base";
import { OrderItem } from "./Base";
/**
 * @generated from protobuf message OMNI.GetStreamResponse
 */
export interface GetStreamResponse {
    /**
     * @generated from protobuf field: string stream_id = 1;
     */
    streamId: string;
    /**
     * @generated from protobuf field: OMNI.OrderItem current_play = 2;
     */
    currentPlay?: OrderItem;
    /**
     * @generated from protobuf field: int32 time_played = 3;
     */
    timePlayed: number; // ms
    /**
     * @generated from protobuf field: int32 time_total = 4;
     */
    timeTotal: number; // ms
    /**
     * @generated from protobuf field: OMNI.PlayState state = 5;
     */
    state: PlayState;
}
/**
 * @generated from protobuf message OMNI.PlayListResponse
 */
export interface PlayListResponse {
    /**
     * @generated from protobuf field: string stream_id = 1;
     */
    streamId: string;
    /**
     * @generated from protobuf field: repeated string order_list = 2;
     */
    orderList: string[];
}
/**
 * @generated from protobuf message OMNI.Response
 */
export interface Response {
    /**
     * @generated from protobuf field: OMNI.StatusCode code = 1;
     */
    code: StatusCode;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "getStreamResponse";
        /**
         * @generated from protobuf field: OMNI.GetStreamResponse get_stream_response = 3;
         */
        getStreamResponse: GetStreamResponse;
    } | {
        oneofKind: "playListResponse";
        /**
         * @generated from protobuf field: OMNI.PlayListResponse play_list_response = 4;
         */
        playListResponse: PlayListResponse;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum OMNI.StatusCode
 */
export enum StatusCode {
    /**
     * @generated from protobuf enum value: SUCCESS = 0;
     */
    SUCCESS = 0,
    /**
     * @generated from protobuf enum value: ERROR = 1;
     */
    ERROR = 1,
    /**
     * @generated from protobuf enum value: NOT_FOUND = 2;
     */
    NOT_FOUND = 2,
    /**
     * @generated from protobuf enum value: INVALID_REQUEST = 3;
     */
    INVALID_REQUEST = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class GetStreamResponse$Type extends MessageType<GetStreamResponse> {
    constructor() {
        super("OMNI.GetStreamResponse", [
            { no: 1, name: "stream_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "current_play", kind: "message", T: () => OrderItem },
            { no: 3, name: "time_played", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "time_total", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "state", kind: "enum", T: () => ["OMNI.PlayState", PlayState] }
        ]);
    }
    create(value?: PartialMessage<GetStreamResponse>): GetStreamResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.streamId = "";
        message.timePlayed = 0;
        message.timeTotal = 0;
        message.state = 0;
        if (value !== undefined)
            reflectionMergePartial<GetStreamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetStreamResponse): GetStreamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stream_id */ 1:
                    message.streamId = reader.string();
                    break;
                case /* OMNI.OrderItem current_play */ 2:
                    message.currentPlay = OrderItem.internalBinaryRead(reader, reader.uint32(), options, message.currentPlay);
                    break;
                case /* int32 time_played */ 3:
                    message.timePlayed = reader.int32();
                    break;
                case /* int32 time_total */ 4:
                    message.timeTotal = reader.int32();
                    break;
                case /* OMNI.PlayState state */ 5:
                    message.state = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetStreamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stream_id = 1; */
        if (message.streamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.streamId);
        /* OMNI.OrderItem current_play = 2; */
        if (message.currentPlay)
            OrderItem.internalBinaryWrite(message.currentPlay, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 time_played = 3; */
        if (message.timePlayed !== 0)
            writer.tag(3, WireType.Varint).int32(message.timePlayed);
        /* int32 time_total = 4; */
        if (message.timeTotal !== 0)
            writer.tag(4, WireType.Varint).int32(message.timeTotal);
        /* OMNI.PlayState state = 5; */
        if (message.state !== 0)
            writer.tag(5, WireType.Varint).int32(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OMNI.GetStreamResponse
 */
export const GetStreamResponse = new GetStreamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayListResponse$Type extends MessageType<PlayListResponse> {
    constructor() {
        super("OMNI.PlayListResponse", [
            { no: 1, name: "stream_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "order_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlayListResponse>): PlayListResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.streamId = "";
        message.orderList = [];
        if (value !== undefined)
            reflectionMergePartial<PlayListResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayListResponse): PlayListResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stream_id */ 1:
                    message.streamId = reader.string();
                    break;
                case /* repeated string order_list */ 2:
                    message.orderList.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayListResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stream_id = 1; */
        if (message.streamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.streamId);
        /* repeated string order_list = 2; */
        for (let i = 0; i < message.orderList.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.orderList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OMNI.PlayListResponse
 */
export const PlayListResponse = new PlayListResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Response$Type extends MessageType<Response> {
    constructor() {
        super("OMNI.Response", [
            { no: 1, name: "code", kind: "enum", T: () => ["OMNI.StatusCode", StatusCode] },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "get_stream_response", kind: "message", oneof: "data", T: () => GetStreamResponse },
            { no: 4, name: "play_list_response", kind: "message", oneof: "data", T: () => PlayListResponse }
        ]);
    }
    create(value?: PartialMessage<Response>): Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = 0;
        message.message = "";
        message.data = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response): Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* OMNI.StatusCode code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* OMNI.GetStreamResponse get_stream_response */ 3:
                    message.data = {
                        oneofKind: "getStreamResponse",
                        getStreamResponse: GetStreamResponse.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).getStreamResponse)
                    };
                    break;
                case /* OMNI.PlayListResponse play_list_response */ 4:
                    message.data = {
                        oneofKind: "playListResponse",
                        playListResponse: PlayListResponse.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).playListResponse)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* OMNI.StatusCode code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* OMNI.GetStreamResponse get_stream_response = 3; */
        if (message.data.oneofKind === "getStreamResponse")
            GetStreamResponse.internalBinaryWrite(message.data.getStreamResponse, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* OMNI.PlayListResponse play_list_response = 4; */
        if (message.data.oneofKind === "playListResponse")
            PlayListResponse.internalBinaryWrite(message.data.playListResponse, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OMNI.Response
 */
export const Response = new Response$Type();
