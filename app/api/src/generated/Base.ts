// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "Base.proto" (package "OMNI", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Struct } from "./google/protobuf/struct";
/**
 * @generated from protobuf message OMNI.BaseExtra
 */
export interface BaseExtra {
    /**
     * @generated from protobuf field: OMNI.BaseExtra.IMPL impl = 2;
     */
    impl: BaseExtra_IMPL; // 枚举表示实现类型
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string; // 实例名称
    /**
     * @generated from protobuf field: google.protobuf.Struct meta_data = 4;
     */
    metaData?: Struct; // 动态元数据
}
/**
 * @generated from protobuf enum OMNI.BaseExtra.IMPL
 */
export enum BaseExtra_IMPL {
    /**
     * 表示未设置或未知类型
     *
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: KOOK = 1;
     */
    KOOK = 1
}
/**
 * @generated from protobuf message OMNI.BaseInfo
 */
export interface BaseInfo {
    /**
     * @generated from protobuf field: string stream_id = 1;
     */
    streamId: string; // 流 ID
    /**
     * @generated from protobuf field: optional OMNI.BaseExtra extra = 2;
     */
    extra?: BaseExtra; // 包含额外信息
}
/**
 * @generated from protobuf message OMNI.OrderItem
 */
export interface OrderItem {
    /**
     * @generated from protobuf field: string task_id = 1;
     */
    taskId: string;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
    /**
     * @generated from protobuf field: OMNI.OrderItem.OrderType type = 3;
     */
    type: OrderItem_OrderType;
    /**
     * @generated from protobuf field: bool use_stream = 4;
     */
    useStream: boolean;
}
/**
 * @generated from protobuf enum OMNI.OrderItem.OrderType
 */
export enum OrderItem_OrderType {
    /**
     * 首次下载的普通文件
     *
     * @generated from protobuf enum value: FILE = 0;
     */
    FILE = 0,
    /**
     * 从系统内部获取的缓存文件
     *
     * @generated from protobuf enum value: CACHED = 1;
     */
    CACHED = 1
}
/**
 * @generated from protobuf message OMNI.StreamInfo
 */
export interface StreamInfo {
    /**
     * @generated from protobuf field: string ip = 1;
     */
    ip: string;
    /**
     * @generated from protobuf field: int32 port = 2;
     */
    port: number;
    /**
     * @generated from protobuf field: int32 rtcp_port = 3;
     */
    rtcpPort: number;
    /**
     * @generated from protobuf field: int32 audio_ssrc = 4;
     */
    audioSsrc: number;
    /**
     * @generated from protobuf field: int32 audio_pt = 5;
     */
    audioPt: number;
    /**
     * @generated from protobuf field: int32 bitrate = 6;
     */
    bitrate: number;
    /**
     * @generated from protobuf field: bool rtcp_mux = 7;
     */
    rtcpMux: boolean;
}
/**
 * @generated from protobuf enum OMNI.PlayState
 */
export enum PlayState {
    /**
     * @generated from protobuf enum value: PLAYING = 0;
     */
    PLAYING = 0,
    /**
     * @generated from protobuf enum value: PAUSE = 1;
     */
    PAUSE = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class BaseExtra$Type extends MessageType<BaseExtra> {
    constructor() {
        super("OMNI.BaseExtra", [
            { no: 2, name: "impl", kind: "enum", T: () => ["OMNI.BaseExtra.IMPL", BaseExtra_IMPL] },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "meta_data", kind: "message", T: () => Struct }
        ]);
    }
    create(value?: PartialMessage<BaseExtra>): BaseExtra {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.impl = 0;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<BaseExtra>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BaseExtra): BaseExtra {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* OMNI.BaseExtra.IMPL impl */ 2:
                    message.impl = reader.int32();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.Struct meta_data */ 4:
                    message.metaData = Struct.internalBinaryRead(reader, reader.uint32(), options, message.metaData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BaseExtra, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* OMNI.BaseExtra.IMPL impl = 2; */
        if (message.impl !== 0)
            writer.tag(2, WireType.Varint).int32(message.impl);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.Struct meta_data = 4; */
        if (message.metaData)
            Struct.internalBinaryWrite(message.metaData, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OMNI.BaseExtra
 */
export const BaseExtra = new BaseExtra$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BaseInfo$Type extends MessageType<BaseInfo> {
    constructor() {
        super("OMNI.BaseInfo", [
            { no: 1, name: "stream_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "extra", kind: "message", T: () => BaseExtra }
        ]);
    }
    create(value?: PartialMessage<BaseInfo>): BaseInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.streamId = "";
        if (value !== undefined)
            reflectionMergePartial<BaseInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BaseInfo): BaseInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stream_id */ 1:
                    message.streamId = reader.string();
                    break;
                case /* optional OMNI.BaseExtra extra */ 2:
                    message.extra = BaseExtra.internalBinaryRead(reader, reader.uint32(), options, message.extra);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BaseInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stream_id = 1; */
        if (message.streamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.streamId);
        /* optional OMNI.BaseExtra extra = 2; */
        if (message.extra)
            BaseExtra.internalBinaryWrite(message.extra, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OMNI.BaseInfo
 */
export const BaseInfo = new BaseInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderItem$Type extends MessageType<OrderItem> {
    constructor() {
        super("OMNI.OrderItem", [
            { no: 1, name: "task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "enum", T: () => ["OMNI.OrderItem.OrderType", OrderItem_OrderType] },
            { no: 4, name: "use_stream", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<OrderItem>): OrderItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = "";
        message.url = "";
        message.type = 0;
        message.useStream = false;
        if (value !== undefined)
            reflectionMergePartial<OrderItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderItem): OrderItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string task_id */ 1:
                    message.taskId = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* OMNI.OrderItem.OrderType type */ 3:
                    message.type = reader.int32();
                    break;
                case /* bool use_stream */ 4:
                    message.useStream = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string task_id = 1; */
        if (message.taskId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.taskId);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* OMNI.OrderItem.OrderType type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* bool use_stream = 4; */
        if (message.useStream !== false)
            writer.tag(4, WireType.Varint).bool(message.useStream);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OMNI.OrderItem
 */
export const OrderItem = new OrderItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamInfo$Type extends MessageType<StreamInfo> {
    constructor() {
        super("OMNI.StreamInfo", [
            { no: 1, name: "ip", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "port", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "rtcp_port", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "audio_ssrc", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "audio_pt", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "bitrate", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "rtcp_mux", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<StreamInfo>): StreamInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ip = "";
        message.port = 0;
        message.rtcpPort = 0;
        message.audioSsrc = 0;
        message.audioPt = 0;
        message.bitrate = 0;
        message.rtcpMux = false;
        if (value !== undefined)
            reflectionMergePartial<StreamInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamInfo): StreamInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ip */ 1:
                    message.ip = reader.string();
                    break;
                case /* int32 port */ 2:
                    message.port = reader.int32();
                    break;
                case /* int32 rtcp_port */ 3:
                    message.rtcpPort = reader.int32();
                    break;
                case /* int32 audio_ssrc */ 4:
                    message.audioSsrc = reader.int32();
                    break;
                case /* int32 audio_pt */ 5:
                    message.audioPt = reader.int32();
                    break;
                case /* int32 bitrate */ 6:
                    message.bitrate = reader.int32();
                    break;
                case /* bool rtcp_mux */ 7:
                    message.rtcpMux = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ip = 1; */
        if (message.ip !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.ip);
        /* int32 port = 2; */
        if (message.port !== 0)
            writer.tag(2, WireType.Varint).int32(message.port);
        /* int32 rtcp_port = 3; */
        if (message.rtcpPort !== 0)
            writer.tag(3, WireType.Varint).int32(message.rtcpPort);
        /* int32 audio_ssrc = 4; */
        if (message.audioSsrc !== 0)
            writer.tag(4, WireType.Varint).int32(message.audioSsrc);
        /* int32 audio_pt = 5; */
        if (message.audioPt !== 0)
            writer.tag(5, WireType.Varint).int32(message.audioPt);
        /* int32 bitrate = 6; */
        if (message.bitrate !== 0)
            writer.tag(6, WireType.Varint).int32(message.bitrate);
        /* bool rtcp_mux = 7; */
        if (message.rtcpMux !== false)
            writer.tag(7, WireType.Varint).bool(message.rtcpMux);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OMNI.StreamInfo
 */
export const StreamInfo = new StreamInfo$Type();
